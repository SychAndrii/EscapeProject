name: Build Installers

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
    tags: ["v*"]

permissions:
  contents: write

jobs:
  app-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore and build (no publish yet)
        run: dotnet build --configuration Release

  windows-build:
    if: github.event_name == 'pull_request'
    needs: app-build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish (match local)
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj -c Release -o publish/win-test

      - name: Create Windows launcher
        run: |
          Set-Content -Path publish/win-test/escape-run.bat -Value "@echo off`r`nsetlocal`r`nset ESCAPE_PROJECT_BASE_DIRECTORY=%~dp0`r`n%~dp0EscapeProjectComposition.exe %*`r`nendlocal"
        shell: pwsh

      - name: Test Windows launcher
        shell: pwsh
        run: |
          cd publish/win-test
          cmd.exe /c escape-run.bat --help

      - name: Bundle Windows build
        run: powershell Compress-Archive -Path publish/win-test/* -DestinationPath windows-installer.zip

      - name: Upload Windows build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer.zip

  linux-build:
    if: github.event_name == 'pull_request'
    needs: app-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Install native deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/
      - name: Publish self-contained for Linux
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj -c Release -r linux-x64 --self-contained true -o publish/linux
      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          rsync -av publish/linux/ AppDir/usr/bin/
          find AppDir -maxdepth 3 -type f \( -name "libdl*" -o -name "libc.so*" -o -name "libpthread*" \) -delete
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop
          touch AppDir/escape-project.png
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage
      - name: Create Linux launcher script
        run: |
          cat << 'EOF' > escape-run.sh
          #!/bin/bash
          set -e
          echo "==> Checking required system libraries..."
          check_libgdiplus_installed() {
              ldconfig -p 2>/dev/null | grep -q libgdiplus
          }
          if ! check_libgdiplus_installed; then
            echo "‚ö†Ô∏è  libgdiplus is missing (needed for Excel AdjustToContents)."
            if command -v apt-get >/dev/null 2>&1; then
              if sudo -v; then
                echo "‚û° Installing libgdiplus with apt..."
                sudo apt-get update
                sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
              else
                echo "‚ùå Cannot auto-install (no sudo). Please run: sudo apt-get install libgdiplus libfuse2"
                exit 1
              fi
            elif command -v yum >/dev/null 2>&1; then
              if sudo -v; then
                echo "‚û° Installing libgdiplus with yum..."
                sudo yum install -y libgdiplus fuse
              else
                echo "‚ùå Cannot auto-install (no sudo). Please run: sudo yum install libgdiplus fuse"
                exit 1
              fi
            elif command -v pacman >/dev/null 2>&1; then
              if sudo -v; then
                echo "‚û° Installing libgdiplus with pacman..."
                sudo pacman -S --needed --noconfirm libgdiplus fuse2
              else
                echo "‚ùå Cannot auto-install (no sudo). Please run: sudo pacman -S libgdiplus fuse2"
                exit 1
              fi
            else
              echo "‚ùå Unsupported Linux distribution. Please install libgdiplus manually using your package manager."
              exit 1
            fi
          fi
          echo "‚úÖ Dependencies ready."
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

          if [ ! -f "$SCRIPT_DIR/config.json" ] || [ ! -f "$SCRIPT_DIR/Task/tasks.json" ]; then
            echo "‚ö†Ô∏è  Extracting files from AppImage..."
            mkdir -p "$SCRIPT_DIR/Task"
            "$SCRIPT_DIR/EscapeProject-x86_64.AppImage" --appimage-extract > /dev/null

            if [ ! -f "$SCRIPT_DIR/Task/tasks.json" ]; then
              cp squashfs-root/usr/bin/Task/tasks.json "$SCRIPT_DIR/Task/tasks.json"
            fi

            rm -rf squashfs-root
          fi

          export ESCAPE_PROJECT_BASE_DIRECTORY="$SCRIPT_DIR"

          # Find libdl.so.2 on the host system
          LIBDL_PATH=$(find /usr/lib /usr/lib64 -maxdepth 2 -name 'libdl.so.2' | head -n1)

          if [ -z "$LIBDL_PATH" ]; then
              echo "‚ùå Could not find libdl.so.2 on the host system."
              exit 1
          fi

          # Determine its directory
          LIBDL_DIR=$(dirname "$LIBDL_PATH")

          # Create libdl.so symlink if missing
          if [ ! -f "$LIBDL_DIR/libdl.so" ]; then
              echo "‚û° Creating symlink: $LIBDL_DIR/libdl.so -> $LIBDL_PATH"
              sudo ln -sf "$LIBDL_PATH" "$LIBDL_DIR/libdl.so"
          fi

          # Add to LD_LIBRARY_PATH so the AppImage can see it
          export LD_LIBRARY_PATH="$LIBDL_DIR:$LD_LIBRARY_PATH"

          echo "‚úÖ Environment ready. Starting app..."
          "$SCRIPT_DIR/EscapeProject-x86_64.AppImage" "$@"
          EOF
          chmod +x escape-run.sh
      - name: Bundle Linux installer
        run: zip -r linux-installer.zip EscapeProject-x86_64.AppImage escape-run.sh
      - name: Upload Linux build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: linux-installer.zip

  windows-test:
    if: github.event_name == 'pull_request'
    needs: windows-build
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: .
      - name: Extract Windows build
        run: Expand-Archive windows-installer.zip -DestinationPath win-test
      - name: Run tests
        run: |
          cd win-test
          cmd.exe /c escape-run.bat generate-excel -t Task/tasks.json
          cmd.exe /c escape-run.bat generate-pdf -t Task/tasks.json
          if (!(Test-Path "TaskPlans/taskPlan.xlsx")) { Write-Error "‚ùå Missing taskPlan.xlsx" }
          if (!(Test-Path "TaskPlans/taskPlan.pdf")) { Write-Error "‚ùå Missing taskPlan.pdf" }

  linux-test:
    if: github.event_name == 'pull_request'
    needs: linux-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: .
      - name: Extract Linux build
        run: unzip linux-installer.zip -d linux-test
      - name: Run tests
        run: |
          cd linux-test
          chmod +x escape-run.sh
          ./escape-run.sh generate-excel -t Task/tasks.json
          ./escape-run.sh generate-pdf -t Task/tasks.json
          if [ ! -f "TaskPlans/taskPlan.xlsx" ]; then echo "‚ùå Missing taskPlan.xlsx"; exit 1; fi
          if [ ! -f "TaskPlans/taskPlan.pdf" ]; then echo "‚ùå Missing taskPlan.pdf"; exit 1; fi

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tag commit is on main
        run: |
          echo "üîç Checking if $GITHUB_SHA is on main..."
          if ! git merge-base --is-ancestor $GITHUB_SHA origin/main; then
            echo "‚ùå Tag $GITHUB_REF does not point to a commit on main!"
            exit 1
          fi
          echo "‚úÖ Tag is on main, continuing..."

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: .

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: .

      - name: Verify artifacts exist
        run: |
          if [ ! -f "windows-installer.zip" ]; then
            echo "‚ùå Missing windows-installer.zip artifact!"
            exit 1
          fi
          if [ ! -f "linux-installer.zip" ]; then
            echo "‚ùå Missing linux-installer.zip artifact!"
            exit 1
          fi
          echo "‚úÖ Both artifacts found, continuing..."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            windows-installer.zip
            linux-installer.zip