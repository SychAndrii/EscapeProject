name: Build Installers

on:
  push:
    branches: [ "workflow/installers" ]

jobs:
  app-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore and build (no publish yet)
        run: dotnet build --configuration Release

  # Windows Build
  windows-build:
    needs: app-build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish self-contained single-file for Windows
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/win

      - name: Test Windows binary
        run: |
          cd publish/win
          ./EscapeProjectComposition.exe --help

      - name: Bundle Windows build
        run: powershell Compress-Archive -Path publish/win/* -DestinationPath windows-installer.zip

      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer.zip

  # Linux Build
  build-linux-installer:
    needs: app-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install native deps (libgdiplus + appimagetool)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Publish self-contained for Linux
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj -c Release -r linux-x64 --self-contained true -o publish/linux

      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          # copy only binaries into AppImage (exclude Task + TaskPlans)
          rsync -av --exclude 'Task' --exclude 'TaskPlans' publish/linux/ AppDir/usr/bin/
          ln -s /lib/x86_64-linux-gnu/libdl.so.2 AppDir/usr/bin/libdl.so || true
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop
          touch AppDir/escape-project.png
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage

      - name: Create Linux installer script
        run: |
          cat << 'EOF' > install-escape.sh
          #!/bin/bash
          set -e
          echo "==> Installing required system libraries..."
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y libgdiplus fuse
          elif command -v pacman >/dev/null 2>&1; then
            sudo pacman -Sy --noconfirm libgdiplus fuse2
          else
            echo "Unsupported Linux distribution. Please install libgdiplus and fuse manually."
            exit 1
          fi
          echo "✅ Dependencies installed."

          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

          # ensure Task folder exists with JSON
          mkdir -p "$SCRIPT_DIR/Task"
          if compgen -G "$SCRIPT_DIR/Task/*.json" > /dev/null; then
            echo "Task folder already has JSON file(s)."
          else
            echo "⚠️ No JSON seed files found in Task/"
          fi

          # ensure TaskPlans folder exists
          mkdir -p "$SCRIPT_DIR/TaskPlans"

          echo "✅ Task and TaskPlans folders ready."
          echo "Now you can run: ./EscapeProject-x86_64.AppImage"
          EOF
          chmod +x install-escape.sh

      - name: Test Linux AppImage
        run: |
          chmod +x EscapeProject-x86_64.AppImage
          ./EscapeProject-x86_64.AppImage --help || true

      - name: Bundle Linux AppImage + script + Task folder
        run: |
          # copy Task folder with JSON outside AppImage into bundle
          cp -r publish/linux/Task .
          zip -r linux-installer.zip EscapeProject-x86_64.AppImage install-escape.sh Task

      - name: Upload Linux installer bundle
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: linux-installer.zip