name: Build Installers

on:
  push:
    branches: [ "workflow/installers" ]

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore and build (no publish yet)
        run: dotnet build --configuration Release

  # Windows Build
  build-windows-installer:
    needs: build-app
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Publish self-contained for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained true -o publish/win
      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: publish/win/**

  # Linux Build
  build-linux:
    needs: build-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install native deps (libgdiplus + appimagetool)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Publish self-contained for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish/linux

      - name: Package as AppImage (with libgdiplus, FUSE workaround, libdl fix)
        run: |
          mkdir -p AppDir/usr/bin
          cp -r publish/linux/* AppDir/usr/bin/

          # Copy libgdiplus into AppImage
          find /usr/lib -name "libgdiplus.so*" -exec cp {} AppDir/usr/bin/ \; || true

          # Symlink system libdl into AppImage (fix DllNotFoundException)
          ln -s /lib/x86_64-linux-gnu/libdl.so.2 AppDir/usr/bin/libdl.so || true

          # Create AppRun launcher
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun

          # Minimal .desktop file
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop

          touch AppDir/escape-project.png

          # Build AppImage without FUSE (extract workaround)
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage

      - name: Create Linux installer script
        run: |
          cat << 'EOF' > install-escape.sh
          #!/bin/bash
          set -e

          echo "==> Installing required system libraries..."
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y libgdiplus fuse
          elif command -v pacman >/dev/null 2>&1; then
            sudo pacman -Sy --noconfirm libgdiplus fuse2
          else
            echo "Unsupported Linux distribution. Please install libgdiplus and fuse manually."
            exit 1
          fi

          echo "==> Running Escape Project..."
          APP=EscapeProject-x86_64.AppImage
          if [ ! -f "$APP" ]; then
            echo "AppImage not found in current folder."
            echo "Please place $APP next to this script and run again."
            exit 1
          fi

          chmod +x "$APP"
          exec "./$APP"
          EOF

          chmod +x install-escape.sh

      - name: Upload Linux build + installer script
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            EscapeProject-x86_64.AppImage
            install-escape.sh
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install native deps (libgdiplus + appimagetool)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Publish self-contained for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish/linux

      - name: Package as AppImage (with libgdiplus, FUSE workaround)
        run: |
          mkdir -p AppDir/usr/bin
          cp -r publish/linux/* AppDir/usr/bin/

          # Copy libgdiplus into AppImage
          find /usr/lib -name "libgdiplus.so*" -exec cp {} AppDir/usr/bin/ \; || true

          # Create AppRun launcher
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun

          # Minimal .desktop file
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop

          touch AppDir/escape-project.png

          # Build AppImage without FUSE (extract workaround)
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage

      - name: Create Linux installer script
        run: |
          cat << 'EOF' > install-escape.sh
          #!/bin/bash
          set -e

          echo "==> Installing required system libraries..."
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y libgdiplus fuse
          elif command -v pacman >/dev/null 2>&1; then
            sudo pacman -Sy --noconfirm libgdiplus fuse2
          else
            echo "Unsupported Linux distribution. Please install libgdiplus and fuse manually."
            exit 1
          fi

          echo "==> Running Escape Project..."
          APP=EscapeProject-x86_64.AppImage
          if [ ! -f "$APP" ]; then
            echo "AppImage not found in current folder."
            echo "Please place $APP next to this script and run again."
            exit 1
          fi

          chmod +x "$APP"
          exec "./$APP"
          EOF

          chmod +x install-escape.sh

      - name: Upload Linux build + installer script
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            EscapeProject-x86_64.AppImage
            install-escape.sh

  # macOS Build
  build-macos-installer:
    needs: build-app
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Publish self-contained for macOS (Intel + Apple Silicon)
        run: |
          dotnet publish -c Release -r osx-x64 --self-contained true -o publish/macos-x64
          dotnet publish -c Release -r osx-arm64 --self-contained true -o publish/macos-arm64
      - name: Create DMG (x64)
        run: |
          mkdir dmg-x64
          cp -r publish/macos-x64/* dmg-x64/
          hdiutil create EscapeProject-x64.dmg -srcfolder dmg-x64 -ov -format UDZO
      - name: Create DMG (arm64)
        run: |
          mkdir dmg-arm64
          cp -r publish/macos-arm64/* dmg-arm64/
          hdiutil create EscapeProject-arm64.dmg -srcfolder dmg-arm64 -ov -format UDZO
      - name: Upload macOS builds
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            EscapeProject-x64.dmg
            EscapeProject-arm64.dmg
