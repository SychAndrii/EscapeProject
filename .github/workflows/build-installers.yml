name: Build Installers

on:
  push:
    branches: ["**"]
    tags: ["v*"]

permissions:
  contents: write

jobs:
  app-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore and build (no publish yet)
        run: dotnet build --configuration Release

  windows-build:
    needs: app-build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish self-contained single-file for Windows
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj `
              -c Release `
              -r win-x64 `
              --self-contained true `
              -p:PublishSingleFile=true `
              -p:IncludeAllContentForSelfExtract=true `
              -p:EnableCompressionInSingleFile=true `
              -p:PublishTrimmed=false `
              -o publish/win

      - name: Create Windows launcher
        run: |
          Set-Content -Path publish/win/escape-run.bat -Value "@echo off`r`nsetlocal`r`nset ESCAPE_PROJECT_BASE_DIRECTORY=%~dp0`r`n%~dp0EscapeProjectComposition.exe %*`r`nendlocal"
        shell: pwsh

      - name: Test Windows launcher
        shell: pwsh
        run: |
          cd publish/win
          cmd.exe /c escape-run.bat --help

      - name: Bundle Windows build
        run: powershell Compress-Archive -Path publish/win/* -DestinationPath windows-installer.zip

      - name: Upload Windows build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer.zip

  linux-build:
    needs: app-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Install native deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/
      - name: Publish self-contained for Linux
        run: dotnet publish EscapeProjectComposition/EscapeProjectComposition.csproj -c Release -r linux-x64 --self-contained true -o publish/linux
      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          rsync -av publish/linux/ AppDir/usr/bin/
          find AppDir -maxdepth 3 -type f \( -name "libdl*" -o -name "libc.so*" -o -name "libpthread*" \) -delete
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop
          touch AppDir/escape-project.png
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage
      - name: Create Linux launcher script
        run: |
          cat << 'EOF' > escape-run.sh
          #!/bin/bash
          set -e
          echo "==> Checking required system libraries..."
          if ! ldconfig -p 2>/dev/null | grep -q libgdiplus; then
            echo "❌ libgdiplus missing. Please install with your package manager."
            exit 1
          fi
          echo "✅ Dependencies ready."
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          export ESCAPE_PROJECT_BASE_DIRECTORY="$SCRIPT_DIR"
          echo "✅ Environment ready. Starting app..."
          "$SCRIPT_DIR/EscapeProject-x86_64.AppImage" "$@"
          EOF
          chmod +x escape-run.sh
      - name: Test Linux launcher
        run: |
          chmod +x EscapeProject-x86_64.AppImage
          ./escape-run.sh --help
      - name: Bundle Linux installer
        run: zip -r linux-installer.zip EscapeProject-x86_64.AppImage escape-run.sh
      - name: Upload Linux build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: linux-installer.zip

  release:
    needs: [windows-build, linux-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event.base_ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: .
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            windows-installer.zip
            linux-installer.zip
