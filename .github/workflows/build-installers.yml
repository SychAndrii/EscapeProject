name: Build Installers

on:
  push:
    branches: [ "workflow/installers" ]

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore and build (no publish yet)
        run: dotnet build --configuration Release

  # Windows Build
  build-windows-installer:
    needs: build-app
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Publish self-contained for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained true -o publish/win
      - name: Test Windows binary
        run: |
          cd publish/win
          ./EscapeProjectComposition.exe --help
      - name: Bundle Windows build
        run: powershell Compress-Archive -Path publish/win/* -DestinationPath windows-installer.zip
      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer.zip

  # Linux Build
  build-linux-installer:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install native deps (libgdiplus + appimagetool)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Publish self-contained for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish/linux

      - name: Package as AppImage
        run: |
          mkdir -p AppDir/usr/bin
          cp -r publish/linux/* AppDir/usr/bin/
          find /usr/lib -name "libgdiplus.so*" -exec cp {} AppDir/usr/bin/ \; || true
          ln -s /lib/x86_64-linux-gnu/libdl.so.2 AppDir/usr/bin/libdl.so || true
          echo '#!/bin/sh
          HERE=$(dirname "$(readlink -f "$0")")
          exec "$HERE/usr/bin/EscapeProjectComposition" "$@"' > AppDir/AppRun
          chmod +x AppDir/AppRun
          echo '[Desktop Entry]
          Name=Escape Project
          Exec=EscapeProjectComposition
          Icon=escape-project
          Type=Application
          Categories=Utility;' > AppDir/escape-project.desktop
          touch AppDir/escape-project.png
          appimagetool --appimage-extract
          ./squashfs-root/AppRun AppDir EscapeProject-x86_64.AppImage

      - name: Create Linux installer script
        run: |
          cat << 'EOF' > install-escape.sh
          #!/bin/bash
          set -e
          echo "==> Installing required system libraries..."
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y libgdiplus libfuse2 || sudo apt-get install -y libgdiplus libfuse2t64
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y libgdiplus fuse
          elif command -v pacman >/dev/null 2>&1; then
            sudo pacman -Sy --noconfirm libgdiplus fuse2
          else
            echo "Unsupported Linux distribution. Please install libgdiplus and fuse manually."
            exit 1
          fi
          echo "✅ Dependencies installed."
          echo "Now you can run: ./EscapeProject-x86_64.AppImage"
          EOF
          chmod +x install-escape.sh

      - name: Test Linux AppImage
        run: |
          chmod +x EscapeProject-x86_64.AppImage
          ./EscapeProject-x86_64.AppImage --help

      - name: Bundle Linux AppImage + script
        run: zip linux-installer.zip EscapeProject-x86_64.AppImage install-escape.sh

      - name: Upload Linux installer bundle
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: linux-installer.zip
 
  # MacOS Build
  build-macos-installer:
    needs: build-app
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Build for Intel + Apple Silicon
      - name: Publish self-contained for macOS (Intel + Apple Silicon)
        run: |
          dotnet publish -c Release -r osx-x64 --self-contained true -o publish/macos-x64
          dotnet publish -c Release -r osx-arm64 --self-contained true -o publish/macos-arm64

      # Create DMG (x64)
      - name: Create DMG (x64)
        run: |
          mkdir dmg-x64
          cp -r publish/macos-x64/* dmg-x64/
          hdiutil create EscapeProject-x64.dmg -srcfolder dmg-x64 -ov -format UDZO

      # Create DMG (arm64)
      - name: Create DMG (arm64)
        run: |
          mkdir dmg-arm64
          cp -r publish/macos-arm64/* dmg-arm64/
          hdiutil create EscapeProject-arm64.dmg -srcfolder dmg-arm64 -ov -format UDZO

      # Install libgdiplus + symlink for test run
      - name: Setup libgdiplus for runtime
        run: |
          brew install mono-libgdiplus
          sudo mkdir -p /usr/local/lib
          LIB_PATH=$(brew --prefix mono-libgdiplus)/lib
          sudo ln -sf "$LIB_PATH/libgdiplus.dylib" /usr/local/lib/libgdiplus.dylib
          export DYLD_LIBRARY_PATH="$LIB_PATH:$DYLD_LIBRARY_PATH"

      # Test Intel build
      - name: Test macOS binary (x64 build)
        run: |
          mkdir -p /tmp/mnt-x64
          hdiutil attach EscapeProject-x64.dmg -mountpoint /tmp/mnt-x64
          /tmp/mnt-x64/EscapeProjectComposition --help || true
          hdiutil detach /tmp/mnt-x64

      # Test ARM build
      - name: Test macOS binary (arm64 build)
        run: |
          mkdir -p /tmp/mnt-arm64
          hdiutil attach EscapeProject-arm64.dmg -mountpoint /tmp/mnt-arm64
          /tmp/mnt-arm64/EscapeProjectComposition --help || true
          hdiutil detach /tmp/mnt-arm64

      # Create installer script for end users
      - name: Create macOS installer script
        run: |
          cat << 'EOF' > install-escape-macos.sh
          #!/bin/bash
          set -e

          echo "==> Installing required system libraries (libgdiplus)..."

          if ! command -v brew >/dev/null 2>&1; then
            echo "Homebrew not found. Installing..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi

          brew install mono-libgdiplus

          # Ensure /usr/local/lib exists
          sudo mkdir -p /usr/local/lib

          # Symlink libgdiplus so .NET can always find it
          LIB_PATH=$(brew --prefix mono-libgdiplus)/lib
          if [ -f "$LIB_PATH/libgdiplus.dylib" ]; then
            sudo ln -sf "$LIB_PATH/libgdiplus.dylib" /usr/local/lib/libgdiplus.dylib
            echo "✅ libgdiplus linked into /usr/local/lib"
          else
            echo "❌ libgdiplus not found in $LIB_PATH"
            exit 1
          fi

          echo ""
          echo "✅ Installation complete!"
          echo "Now you can open Escape Project DMG, drag it to Applications, and run it."
          EOF

          chmod +x install-escape-macos.sh

      # Upload macOS builds + installer script
      - name: Upload macOS builds
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            EscapeProject-x64.dmg
            EscapeProject-arm64.dmg
            install-escape-macos.sh